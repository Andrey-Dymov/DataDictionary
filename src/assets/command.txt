- у нас 5 типов данных:
1. dictionaries-meta.json (dictionaries) - метаданные о словарях (список словарей) 
2. dictionary (schema) - хранит в себе информацию словаре, как о списке сущностей
3. entity (сущность) - хранит в себе информацию о сущности вцелом
4. field - хранит в себе информацию о полях каждой сущности 
5. relation - хранит в себе информацию о связях между сущностью и другими сущнстями

нужно сделатьтак , что бы все данные для списков и форм считывались и записывались через единый интерфейс. как на сервере так и на клиенте. по одинаковой схеме.

для каждой сущности нужно сделать в серверной части свой интерфейс. и набор действий:
- получить список экземпляров (кроме 2)
- получить выбранный экземпляр (1, 3, 4, 5 - по имени, 2 - по имени родителя)
- сохранить (обновить) экземпляр (1, 3, 4, 5 - по имени, 2 - по имени родителя) 
- создать экземпляр (1 - сам по мебе, 2, 3, 4, 5 - с указанием имени родителя)
- удалить экземпляр (1, 3, 4, 5 - по имени, 2 - по имени родителя)

на строное клиента иметь аналогичные вызовы собранные в одном файле. Однотипным образом для всех сущностей. Вызовы функций находящихся в этом файле нужно делать непоследствеено из списков и форм. Никаких других промежуточных слоев функционала быть не должно (кроме вызова Axios)

Что касается оставшихся изменений, нужно:
Обновить DirectorySelectDialog.vue для работы с новым API
Обновить FileSelectDialog.vue для работы с новым API
Исправить визуальные изменения в указанных выше компонентах
Хотите, чтобы я сделал эти изменения?

RelationForm.vue - изменил структуру формы и добавил новые стили
EntityInfo.vue - добавил новые стили и изменил структуру карточки
RelationsList.vue - изменил отображение связей